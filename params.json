{"name":"Vandamme","tagline":"A Changelog convention and parser","body":"# Vandamme\r\n\r\n[![Dependency Status](https://gemnasium.com/tech-angels/vandamme.png)](https://gemnasium.com/tech-angels/vandamme)\r\n[![Build Status](https://travis-ci.org/tech-angels/vandamme.png?branch=master)](https://travis-ci.org/tech-angels/vandamme)\r\n\r\nVandamme is a changelog parser gem, used in the [Gemnasium](https://gemnasium.com) project.\r\n\r\nThere are thousands of different changelogs (if any) out there, with dozens of different names. \r\nIt's almost impossible to fetch and parse them automatically... Gemnasium is using Vandamme to \r\nkeep each changelog specificities (changelog location, version format, file format).\r\n\r\nWe really believe in changelogs. Following changes in dependencies is a hard task, and almost impossible\r\nby reading commits only.\r\n\r\nThe opensource world would be so much nicer with full, readable and comprehensive changelogs. \r\nAs a solution to this problem, we propose a simple set of rules and requirements to follow in order to have a \r\nStandard Changelog. Please see the [Changelogs Convention](#changelogs-convention) section below.\r\n\r\nStay aware of changes!\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'vandamme'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install vandamme\r\n\r\n## Usage\r\n\r\nThe Parser initializer will use 3 options:\r\n\r\n* **:changelog**: full raw content of the changelog file\r\n* **:version_header_exp**: regexp to match the versions lines in changelog\r\n* **:format** (*optional*): if you want to use the html converter, you must provide the original format of the changelog. (default: 'raw')\r\n* **:group_match** (*optional*): Number of the match group is used for version matching. (default: 0)\r\n\r\n### Regex format\r\n\r\n**version_header_exp** will be converted to a new Regex object if it wasn't one.\r\nTherefore, \r\n\r\n    Vandamme::Parser.new(changelog: changelog, version_header_exp: '\\d{4}-\\d{2}-\\d{2} \\((\\d\\.\\d+\\.\\d+)\\)')\r\n\r\nis equivalent to:\r\n\r\n    Vandamme::Parser.new(changelog: changelog, version_header_exp: /\\d{4}-\\d{2}-\\d{2} \\((\\d\\.\\d+\\.\\d+)\\)/)\r\n\r\nBe careful with how ruby is handling escaped caracters in a string: ```\"\\d\"``` if different from ```'\\d'```!\r\n\r\n### Version Matching\r\n\r\nBy default, the first match of the Regexp will be considered as the version number.\r\nie:\r\n\r\n    'Release (\\d+\\.\\d+\\.\\d+)'\r\n\r\nwill match lines like:\r\n\r\n    Release 1.3.5\r\n\r\nand '1.3.5' will be used as a key in the Hash returned by the ```parse``` method.\r\nStarting Vandamme 0.0.2, it's possible to specify which match group must be\r\nused for the version number, by passing the option **:match_group** to the\r\ninitializer:\r\n\r\n    Vandamme::Parser.new([...], :matching_group => 1)\r\n\r\nThe default match group is 0: this is the first group matched (0 being the\r\noriginal string), because we are using ```String#scan``` instead of ```Regexp.match```.\r\n\r\n\r\n## Examples\r\n\r\n```ruby\r\nrequire 'rubygems'\r\nrequire 'vandamme'\r\nrequire 'open-uri'\r\nchangelog = open('https://raw.github.com/flori/json/master/CHANGES').read\r\nparser = Vandamme::Parser.new(changelog: changelog, version_header_exp: '\\d{4}-\\d{2}-\\d{2} \\((\\d\\.\\d+\\.\\d+)\\)', format: 'markdown')\r\nparser.parse\r\n```\r\nwill return a hash with each version as keys, and version content as value.\r\nThe hash can be converted to html (using the [github-markup](https://github.com/github/markup) gem):\r\n\r\n```ruby\r\nparser.to_html\r\n```\r\n\r\nVandamme is bundled with Redcarpet by default (for markdown), you must add the necessary gems to your bundle if you want to handle more formats.\r\n\r\n## Changelogs Convention\r\n\r\n### Filename\r\n\r\n+ Your changelog file **MUST** be named CHANGELOG.format (preferably ```CHANGELOG.md```)\r\n+ Your changelog file **MUST** be at the root of your project\r\n+ You **MAY** have different changelog in each branch (like [Ruby on Rails](https://github.com/rails/rails))\r\n\r\n### Format\r\n\r\n+ Your changelog **MUST** be in plain text formatting syntax. \r\n+ You **MUST** use one the supported markup: https://github.com/github/markup#markups \r\n+ You **MAY** prefer Markdown (.md) is now the most popular format for READMEs on Github, let's stick to it.\r\n+ Your changelog **MUST** follow the format:\r\n\r\n```\r\nLEVEL 1 (or 2) HEADER WITH VERSION AND RELEASE DATE\r\n\r\nVERSION CHANGES\r\n\r\nLEVEL 1 (or 2) HEADER WITH VERSION AND RELEASE DATE\r\n\r\nVERSION CHANGES\r\n\r\n[...]\r\n```\r\n\r\nExample in Markdown: \r\n\r\n```markdown\r\n# 1.2.4 / Unreleased\r\n\r\n* Fix bug #2\r\n\r\n# 1.2.3 / 2013-02-14\r\n\r\n* Update API \r\n* Fix bug #1\r\n```\r\n\r\n+ LEVEL 1 (or 2) HEADER WITH VERSION **MUST** at least contain the version number (```{{version_number}}```)\r\n+ If the release date is present, it **MUST** of the form ```{{version_number}} / {{release_date}}```\r\n+ {{release_date}} **MUST** follow the ISO 8601 format: \"YYYY-MM-DD\", or the text \"Unreleased\", if present\r\n+ VERSION CHANGES **MAY** contain more levels, but MUST follow the markup syntax.\r\n+ {{version_number}} **SHOULD** follow the [semver](http://semver.org/) convention.\r\n+ {{version_number}} **MUST** contain at least a dot (ex: \"1.2\").\r\n\r\n### Keywords\r\n\r\nUsage of keywords is strongly recommanded, as it helps to identify the nature of each change.\r\nKeywords should be a one-word tag, in caps, preceding each change line:\r\n\r\n```markdown\r\n# 1.2.4 / Unreleased\r\n\r\n* [BUGFIX] Fix bug #2\r\n* [FEATURE] Add github oauth login\r\n* [PERFORMANCE] Now 25% faster!\r\n```\r\n\r\n+ Keyword, if present, **MUST** be in caps, at beginning of line, and surrounded with square brackets.\r\n+ Keyword **SHOULD** be preferably among: \"SECURITY\", \"BUGFIX\", \"FEATURE\", \"ENHANCEMENT\", \"PERFORMANCE\"\r\n\r\n\r\n### Note\r\n\r\nChangelogs following these rules will be automatically included in Gemnasium.\r\nThe regexp used is \r\n\r\n```\r\n^#{0,3} ?([\\w\\d\\.-]+\\.[\\w\\d\\.-]+[a-zA-Z0-9])( \\/ (\\d{4}-\\d{2}-\\d{2}|\\w+))?\\n?[=-]*\r\n```\r\n\r\nCheck your changelog using Rubular if you want to be sure:\r\nhttp://rubular.com/r/u5FTZWYtE0\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## Credits\r\n\r\n  Philippe Lafoucri√®re @ Tech-angels - http://www.tech-angels.com/\r\n\r\n  [![Tech-Angels](http://media.tumblr.com/tumblr_m5ay3bQiER1qa44ov.png)](http://www.tech-angels.com)\r\n\r\n","google":"UA-11337988-5","note":"Don't delete this file! It's used internally to help with page regeneration."}